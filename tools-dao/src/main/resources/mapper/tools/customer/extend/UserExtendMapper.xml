<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gialen.tools.dao.repository.customer.extend.UserExtendMapper">

	<!--	统计vip,店主用户新增数量-->
    <select id="countUserType" resultType="com.gialen.tools.dao.dto.UserDataDto">
	SELECT
		date_format(l.update_time, '%Y%m%d') AS countTime,
		count(
			CASE
			WHEN l.level_type = '2' and log.new_level_type = '2' and log.old_level_type = '1' THEN
				1
			ELSE
				NULL
			END
		) AS storeNum,
		count(
			CASE
			WHEN l.level_type = '1' THEN
				1
			ELSE
				NULL
			END
		) AS vipNum
	FROM
		user_level as l
	left join user_level_change_log as log on l.user_id = log.user_id
	WHERE
		(	l.update_time BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR}
			OR l.update_time BETWEEN #{relativeStartTime,jdbcType=VARCHAR} and #{relativeEndTime,jdbcType=VARCHAR}
		)
	GROUP BY
		date_format(l.update_time, '%Y%m%d')
	ORDER BY
		date_format(l.update_time, '%Y%m%d') DESC;
  </select>

	<select id="countOrderMoney" resultType="com.gialen.tools.dao.dto.UserOrderDto">
		select (case when ul.level_type>1 then 2 else 1 end) utype,count(1) orderNum,SUM(o.money + o.fav_money) orderMoney
		from gialen_order.orders o
		inner join user_level ul on o.user_id=ul.user_id and ul.status=1
		where o.pay_status = 1 and o.is_parent = 1
		and o.create_time BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR}
		group by utype
	</select>
</mapper>